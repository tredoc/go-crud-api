// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockservice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tredoc/go-crud-api/pkg/types"
)

// Book is an autogenerated mock type for the Book type
type Book struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: _a0, _a1
func (_m *Book) CreateBook(_a0 context.Context, _a1 *types.Book) (*types.BookWithDetails, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *types.BookWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Book) (*types.BookWithDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Book) *types.BookWithDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BookWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Book) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: _a0, _a1
func (_m *Book) DeleteBook(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields: _a0
func (_m *Book) GetAllBooks(_a0 context.Context) ([]*types.Book, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []*types.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*types.Book, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: _a0, _a1
func (_m *Book) GetBookByID(_a0 context.Context, _a1 int64) (*types.BookWithDetails, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 *types.BookWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.BookWithDetails, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.BookWithDetails); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BookWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: _a0, _a1, _a2
func (_m *Book) UpdateBook(_a0 context.Context, _a1 int64, _a2 *types.UpdateBook) (*types.Book, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 *types.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.UpdateBook) (*types.Book, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.UpdateBook) *types.Book); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *types.UpdateBook) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBook creates a new instance of Book. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Book {
	mock := &Book{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
