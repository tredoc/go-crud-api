// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockservice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/tredoc/go-crud-api/pkg/types"
)

// Genre is an autogenerated mock type for the Genre type
type Genre struct {
	mock.Mock
}

// CreateGenre provides a mock function with given fields: _a0, _a1
func (_m *Genre) CreateGenre(_a0 context.Context, _a1 *types.Genre) (*types.Genre, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateGenre")
	}

	var r0 *types.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Genre) (*types.Genre, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Genre) *types.Genre); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Genre) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGenre provides a mock function with given fields: _a0, _a1
func (_m *Genre) DeleteGenre(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGenre")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllGenres provides a mock function with given fields: _a0
func (_m *Genre) GetAllGenres(_a0 context.Context) ([]*types.Genre, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGenres")
	}

	var r0 []*types.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*types.Genre, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Genre); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenreByID provides a mock function with given fields: _a0, _a1
func (_m *Genre) GetGenreByID(_a0 context.Context, _a1 int64) (*types.Genre, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGenreByID")
	}

	var r0 *types.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.Genre, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.Genre); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGenre provides a mock function with given fields: _a0, _a1, _a2
func (_m *Genre) UpdateGenre(_a0 context.Context, _a1 int64, _a2 *types.Genre) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGenre")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.Genre) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGenre creates a new instance of Genre. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenre(t interface {
	mock.TestingT
	Cleanup(func())
}) *Genre {
	mock := &Genre{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
